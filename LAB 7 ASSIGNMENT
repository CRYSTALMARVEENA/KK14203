//LAB 7 

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;

//required for border
import javax.swing.BorderFactory;
import javax.swing.border.Border;

//required for file IO
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;

//required for exception
import java.io.IOException;

//Header panel
class HeaderPanel extends JPanel{
   private JLabel header;
   public HeaderPanel(){
      	header = new JLabel("COURSE EVALUATION FORM");
      	add(header);
   }
}

//Panel for Form
class FormPanel extends JPanel implements ActionListener, ItemListener{
   //list all UI components for the panel
   JLabel name_label;
   JTextField name_txtf;
   JLabel matric_label;
   JTextField matric_txtf;
   JLabel code_label;
   JComboBox<String> code_combox;
   JLabel rating_label;
   JLabel outcome_label;
   JButton submit_button;
   JButton clear_button;
   JCheckBox outcome_checkBox1;
   JCheckBox outcome_checkBox2;
   JLabel output_label; 
   JScrollPane scrollPane;
   Border border = BorderFactory.createLineBorder(Color.BLACK, 1);
   
   //global variable  
   String output="";
   String code_selected="";
   String cb_selected="";
   String rb_selected="";
   String filePath="StudentEvaluationForm.txt"; //in the same directory as the source code
      
   public FormPanel(){   
      setLayout(new FlowLayout(FlowLayout.LEFT));     
      
      name_label = new JLabel("Name");
      name_label.setPreferredSize(new Dimension(150, 20));
      name_label.setBorder(border);
      
      add(name_label);
      name_txtf = new JTextField(26);
      add(name_txtf);
      
      //input name will not accept any number/integer.
      name_txtf.addKeyListener(new KeyAdapter() {
         public void keyTyped(KeyEvent event) {
         char c=event.getKeyChar(); 
            if(Character.isAlphabetic(c) || (c==KeyEvent.VK_BACK_SPACE) || (c==KeyEvent.VK_DELETE) || (c==KeyEvent.VK_SPACE)) {
                event = event;
            }
           else{
                event.consume();
            }
        }
});
     
      matric_label = new JLabel("Matric No.");
      matric_label.setPreferredSize(new Dimension(150, 20));
      matric_label.setBorder(border);
      add(matric_label);
      matric_txtf = new JTextField(26);
      add(matric_txtf);   
      
      String[] courses={"[Select]", "KT14203 Computer Organization and Architecture", "KT14403 Discrete Structure", "KK14203 Oriented Object Programming"};
      
      code_label = new JLabel("Course Code");
      code_label.setPreferredSize(new Dimension(150, 20));
      add(code_label);
      code_combox = new JComboBox<String>(courses);
      add(code_combox); 
      
      //JComboBox action listener
      code_combox.addActionListener(new ActionListener(){
         public void actionPerformed(ActionEvent ae){
            //get selected item
            code_selected = (String) code_combox.getSelectedItem();
         }
      });  
      
      rating_label = new JLabel("Rating");
      rating_label.setPreferredSize(new Dimension(150, 20));
      add(rating_label);
      
      //Radio buttons and action listener
      JRadioButton radioButton1 = new JRadioButton("1");
      radioButton1.addActionListener(this);
      add(radioButton1);
      
      JRadioButton radioButton2 = new JRadioButton("2");
      radioButton2.addActionListener(this);
      add(radioButton2);
      
      JRadioButton radioButton3 = new JRadioButton("3");
      radioButton3.addActionListener(this);
      add(radioButton3);
      
      JRadioButton radioButton4 = new JRadioButton("4");
      radioButton4.addActionListener(this);
      add(radioButton4);
      
      JRadioButton radioButton5 = new JRadioButton("5");
      radioButton5.addActionListener(this);
      add(radioButton5);
      
      //define button group
      ButtonGroup button_group = new ButtonGroup();
      button_group.add(radioButton1);
      button_group.add(radioButton2);
      button_group.add(radioButton3);
      button_group.add(radioButton4);
      button_group.add(radioButton5);
      
      outcome_label = new JLabel("OUTCOME");
      outcome_label.setPreferredSize(new Dimension(150, 20));
      add(outcome_label);
      
      //checkbox and item listener
      outcome_checkBox1 = new JCheckBox("BASIC KNOWLEDGE");
      outcome_checkBox1.addItemListener(this);
      add(outcome_checkBox1);
      outcome_checkBox2 = new JCheckBox("ADVANCED KNOWLEDGE");
      outcome_checkBox2.addItemListener(this);
      add(outcome_checkBox2);
      
      submit_button = new JButton("SUBMIT");
      add(submit_button);
      clear_button = new JButton("CLEAR");
      add(clear_button);

      //handle button submit action listener
      //view the input to output label
      //and write to file
      submit_button.addActionListener(new ActionListener(){           
         public void actionPerformed(ActionEvent e){  
            //call method
            if(printOutput()){
               writeInput();  
               
               //show dialog message if input is succesfully saved
               JOptionPane.showMessageDialog(null, "Data saved successfully");
            }   
         }  
      });

      //handle button clear action listener
      clear_button.addActionListener(new ActionListener(){  
         public void actionPerformed(ActionEvent e){  
            output_label.setText("Output");  
            name_txtf.setText("");
            matric_txtf.setText(""); 
            code_combox.setSelectedIndex(0);
            button_group.clearSelection();
            outcome_checkBox1.setSelected(false);
            outcome_checkBox2.setSelected(false);
         }  
      });
      
      output_label = new JLabel("Output");
      output_label.setBorder(border);
      output_label.setVerticalAlignment(JLabel.TOP);
      
      //add output label to scrollpane
      scrollPane = new JScrollPane(output_label);
      scrollPane.setPreferredSize(new Dimension(400,90));
      add(scrollPane);     
   }

   //handle radio button selection
   public void actionPerformed(ActionEvent eventA) {
      rb_selected = eventA.getActionCommand();    	   
   }
   
   //handle item listener for checkbox
   public void itemStateChanged(ItemEvent eventB) {
      JCheckBox check = (JCheckBox)eventB.getSource();
      cb_selected += check.getText() + " ";   
   }
   
   //method to print output to lbl_output
   public boolean printOutput(){
      output = "<html>";
      output += "Thank you for your Evaluation<br><br>"; 
      output += "Name: " + name_txtf.getText() + "<br>";
      output += "Matric: " + matric_txtf.getText() + "<br>";
      
      if(code_selected.equals("[Select]") || code_combox.getSelectedItem().equals("")  || name_txtf.getText().equals("") || matric_txtf.getText().equals("") || rb_selected.equals("") || cb_selected.equals("")){
         JOptionPane.showMessageDialog(null, "Please fill the Evaluation.");
         return false;
      }
      
      output += "Course: " + code_selected + "<br>";
      output += "Rating: " + rb_selected + "<br>";
      output += "Outcome: " + cb_selected + "<br>";
      output += "</html>";          
      output_label.setText(output);
      scrollPane.getViewport().revalidate();
      return true;
    }

    //write data into text file
    public void writeInput(){
      File file = new File(filePath);
		FileWriter fr = null;
		BufferedWriter br = null;
		PrintWriter pr = null;
      
      String input = " " + name_txtf.getText() + " || " + matric_txtf.getText() + " || " + code_selected + " || " + rb_selected + " || " + cb_selected;
      
      //exception implementation - to append new data into text file
		try {
			// FileWriter is initialized by using the following constructors
         
			fr = new FileWriter(file, true);
			br = new BufferedWriter(fr);
			pr = new PrintWriter(br);
			pr.println(input);
         } 
         
     catch (IOException e) {			
         output_label.setText(e.toString());
		   } finally {
			try {
				pr.close();
				br.close();
				fr.close();
			} catch (IOException e) {
				output_label.setText(e.toString());
			}
		}
    }
}

class MenuActionListener implements ActionListener {
   FormPanel fp;
   //receive FormPanel class to this constructor
   public MenuActionListener(FormPanel p){
      fp = p;
}
    
   public void actionPerformed(ActionEvent e) {      
      BufferedReader reader;
	   try {
			reader = new BufferedReader(new FileReader(fp.filePath));
			String line = reader.readLine();
         String output="<html>";
			while (line != null) {
				output += line + "<br>";
				// read next line
				line = reader.readLine();
			}
         output += "<br>";
         fp.output_label.setText(output);
			reader.close();
		} catch (IOException io) {
			fp.output_label.setText(io.toString());
		}
  }
}

class MenuActionListener2 implements ActionListener {
   FormPanel fp;
   //receive FormPanel class to this constructor
   public MenuActionListener2(FormPanel p){
      fp = p;
}
    
   public void actionPerformed(ActionEvent e) {   
      
      //show confirm dialog to exit application
      int response = JOptionPane.showConfirmDialog(null,"Do you want to Exit? ", 
     "Confirm",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);

     if (response == JOptionPane.YES_OPTION)
     {
        System.exit(0);
     } 
  }
}

//run the application using this main
public class Lab7_Assignment {  
   public static void main(String[] 	args) {  
      JFrame frame = new JFrame("Course Evaluation");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
      
      //load panels
      HeaderPanel header_panel = new 	HeaderPanel();
      FormPanel form_panel = new FormPanel();
      
      // create a menu
      JMenuBar menu_bar = new JMenuBar();  
      JMenu x = new JMenu("Menu"); 
      
      // create menuitems 
      JMenuItem menu1 = new JMenuItem("Load Data"); 
      // attach listener and send FormPanel class
      menu1.addActionListener(new MenuActionListener(form_panel));
      
      JMenuItem menu2 = new JMenuItem("Exit");
      menu2.addActionListener(new MenuActionListener2(form_panel));
 
      // add menu items to menu 
      x.add(menu1); 
      x.add(menu2);
     
      // add menu to menu bar 
      menu_bar.add(x); 
      // add menubar to frame 
      frame.setJMenuBar(menu_bar);  
               
      //add panels to frame       
      frame.add(header_panel,BorderLayout.NORTH);
      frame.add(form_panel, BorderLayout.CENTER);
      frame.setSize(500,430);
      frame.setVisible(true);
   }  
}
